import { useEffect, useState, useCallback } from "react";
import { Plus, Search, RefreshCcw } from "lucide-react";
import { Input } from "@/components/ui/input";
import SpecialtyFormModal from "@/pages/admin/Specialties/components/SpecialtyFormModal";
import SpecialtiesTable from "@/pages/admin/Specialties/components/SpecialtiesTable";
import { SpecialtyService } from "@/service/specialty/specialty.service";
import { message } from "antd";
import { useSearchParams } from "react-router-dom"; // ‚úÖ ƒë·ªÉ ƒë·ªçc/ghi query tr√™n URL

const SpecialtiesPage = () => {
  const [specialties, setSpecialties] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedSpecialty, setSelectedSpecialty] = useState(null);

  // ‚úÖ hook cho query param
  const [searchParams, setSearchParams] = useSearchParams();

  // L·∫•y t·ª´ kh√≥a t·ª´ URL (n·∫øu c√≥)
  const initialKeyword = searchParams.get("keyword") || "";

  const [searchInput, setSearchInput] = useState(initialKeyword);
  const [searchTerm, setSearchTerm] = useState(initialKeyword);

  // üü¢ H√†m load danh s√°ch
  const fetchSpecialties = useCallback(async () => {
    try {
      setLoading(true);
      const data = await SpecialtyService.getAll();

      const mapped = data.map((item) => ({
        id: item.specialization_id,
        name: item.specialization_name,
        description: item.description,
        createdAt: item.createdAt.split("T")[0],
      }));

      setSpecialties(mapped);
    } catch (err) {
      console.error("L·ªói khi t·∫£i danh s√°ch chuy√™n khoa:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch chuy√™n khoa!");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchSpecialties();
  }, [fetchSpecialties]);

  // ‚úèÔ∏è S·ª≠a
  const handleEdit = (specialty) => {
    setSelectedSpecialty(specialty);
    setIsEditModalOpen(true);
  };

  // ‚ùå X√≥a
  const handleDelete = async (specialtyId) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a chuy√™n khoa n√†y?")) {
      try {
        await SpecialtyService.delete(specialtyId);
        message.success("ƒê√£ x√≥a chuy√™n khoa th√†nh c√¥ng!");
        fetchSpecialties(); // reload danh s√°ch
      } catch (err) {
        console.error("L·ªói khi x√≥a chuy√™n khoa:", err);
        message.error("Kh√¥ng th·ªÉ x√≥a chuy√™n khoa. Vui l√≤ng th·ª≠ l·∫°i!");
      }
    }
  };

  // ‚úÖ Sau khi th√™m ho·∫∑c s·ª≠a
  const handleAfterSave = () => {
    fetchSpecialties();
  };

  // üîç Khi ·∫•n n√∫t t√¨m ki·∫øm
  const handleSearch = () => {
    const keyword = searchInput.trim();
    setSearchTerm(keyword);
    if (keyword) {
      setSearchParams({ keyword }); // ‚úÖ ghi v√†o URL
    } else {
      setSearchParams({}); // xo√° param n·∫øu r·ªóng
    }
  };

  // üîÑ L√†m m·ªõi danh s√°ch (xo√° keyword v√† reload)
  const handleReset = () => {
    setSearchInput("");
    setSearchTerm("");
    setSearchParams({});
    fetchSpecialties();
  };

  // L·ªçc client-side
  const filteredSpecialties = specialties.filter((specialty) =>
    specialty.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="p-6 text-center text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="mx-auto max-w-7xl">
        {/* Header */}
        <div className="mb-6 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Qu·∫£n l√Ω chuy√™n khoa
            </h1>
            <p className="text-gray-600">
              Qu·∫£n l√Ω c√°c chuy√™n khoa c·ªßa b·ªánh vi·ªán
            </p>
          </div>
          <button
            onClick={() => setIsAddModalOpen(true)}
            className="flex items-center gap-2 rounded-lg bg-orange-600 px-4 py-2 text-white hover:bg-orange-700 cursor-pointer"
          >
            <Plus className="h-5 w-5" />
            Th√™m chuy√™n khoa
          </button>
        </div>

        {/* Search */}
        <div className="mb-6 rounded-lg bg-white p-4 shadow-sm">
          <div className="flex items-center gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400" />
              <Input
                type="text"
                placeholder="Nh·∫≠p t√™n chuy√™n khoa..."
                className="px-10"
                value={searchInput}
                onChange={(e) => setSearchInput(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === "Enter") handleSearch();
                }}
              />
            </div>

            <button
              onClick={handleSearch}
              className="rounded-md bg-orange-600 text-white px-4 py-2 hover:bg-orange-700 cursor-pointer"
            >
              T√¨m ki·∫øm
            </button>

            <button
              onClick={handleReset}
              className="rounded-md border border-gray-300 text-gray-700 px-3 py-2 hover:bg-gray-50 cursor-pointer flex items-center gap-2"
            >
              <RefreshCcw className="h-4 w-4" />
              L√†m m·ªõi
            </button>
          </div>
        </div>

        {/* Table */}
        <SpecialtiesTable
          handleDelete={handleDelete}
          handleEdit={handleEdit}
          specialties={filteredSpecialties}
        />

        {/* Add Modal */}
        {isAddModalOpen && (
          <SpecialtyFormModal
            onClose={() => setIsAddModalOpen(false)}
            onSave={handleAfterSave}
          />
        )}

        {/* Edit Modal */}
        {isEditModalOpen && selectedSpecialty && (
          <SpecialtyFormModal
            specialty={selectedSpecialty}
            onClose={() => {
              setIsEditModalOpen(false);
              setSelectedSpecialty(null);
            }}
            onSave={handleAfterSave}
          />
        )}
      </div>
    </div>
  );
};

export default SpecialtiesPage;
